{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { loadCart, cartEmpty } from \"./helper/cartHelper\";\n// import { Link } from \"react-router-dom\";\n// import { getmeToken, processPayment } from \"./helper/paymentBHelper\";\n// import { createOrder } from \"./helper/OrderHelper\";\n// import { isAuthenticated } from \"../auth/helper\";\n\n// import DropIn from \"braintree-web-drop-in-react\";\n\n// const Paymentb = ({ products, setReload = f => f, reload = undefined }) => {\n//   const [info, setInfo] = useState({\n//     loading: false,\n//     success: false,\n//     clientToken: null,\n//     error: \"\",\n//     instance: {}\n//   });\n\n//   const userId = isAuthenticated() && isAuthenticated().user._id;\n//   const token = isAuthenticated() && isAuthenticated().token;\n\n//   const getToken = (userId, token) => {\n//     getmeToken(userId, token).then(info => {\n//       // console.log(\"INFORMATION\", info);\n//       if (info.error) {\n//         setInfo({ ...info, error: info.error });\n//       } else {\n//         const clientToken = info.clientToken;\n//         setInfo({ clientToken });\n//       }\n//     });\n//   };\n\n//   const showbtdropIn = () => {\n//     return (\n//       <div>\n//         {info.clientToken !== null && products.length > 0 ? (\n//           <div>\n//             <DropIn\n//               options={{ authorization: info.clientToken }}\n//               onInstance={instance => (info.instance = instance)}\n//             />\n//             <button className=\"btn btn-block btn-success\" onClick={onPurchase}>\n//               Buy\n//             </button>\n//           </div>\n//         ) : (\n//           <h3>Please login or add something to cart</h3>\n//         )}\n//       </div>\n//     );\n//   };\n\n//   useEffect(() => {\n//     getToken(userId, token);\n//   }, []);\n\n//   const onPurchase = () => {\n//     setInfo({ loading: true });\n//     let nonce;\n//     let getNonce = info.instance.requestPaymentMethod().then(data => {\n//       nonce = data.nonce;\n//       const paymentData = {\n//         paymentMethodNonce: nonce,\n//         amount: getAmount()\n//       };\n//       processPayment(userId, token, paymentData)\n//         .then(response => {\n//           setInfo({ ...info, success: response.success, loading: false });\n//           console.log(\"PAYMENT SUCCESS\");\n//           const orderData = {\n//             products: products,\n//             transaction_id: response.transaction.id,\n//             amount: response.transaction.amount\n//           };\n//           createOrder(userId, token, orderData);\n//           cartEmpty(() => {\n//             console.log(\"Did we got a crash?\");\n//           });\n\n//           setReload(!reload);\n//         })\n//         .catch(error => {\n//           setInfo({ loading: false, success: false });\n//           console.log(\"PAYMENT FAILED\");\n//         });\n//     });\n//   };\n\n//   const getAmount = () => {\n//     let amount = 0;\n//     products.map(p => {\n//       amount = amount + p.price;\n//     });\n//     return amount;\n//   };\n\n//   return (\n//     <div>\n//       <h3>Your bill is {getAmount()} $</h3>\n//       {showbtdropIn()}\n//     </div>\n//   );\n// };\n\n// export default Paymentb;","map":{"version":3,"names":[],"sources":["/Users/srihitha/Desktop/mern/projfrontend/src/core/Cart.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { loadCart, cartEmpty } from \"./helper/cartHelper\";\n// import { Link } from \"react-router-dom\";\n// import { getmeToken, processPayment } from \"./helper/paymentBHelper\";\n// import { createOrder } from \"./helper/OrderHelper\";\n// import { isAuthenticated } from \"../auth/helper\";\n\n// import DropIn from \"braintree-web-drop-in-react\";\n\n// const Paymentb = ({ products, setReload = f => f, reload = undefined }) => {\n//   const [info, setInfo] = useState({\n//     loading: false,\n//     success: false,\n//     clientToken: null,\n//     error: \"\",\n//     instance: {}\n//   });\n\n//   const userId = isAuthenticated() && isAuthenticated().user._id;\n//   const token = isAuthenticated() && isAuthenticated().token;\n\n//   const getToken = (userId, token) => {\n//     getmeToken(userId, token).then(info => {\n//       // console.log(\"INFORMATION\", info);\n//       if (info.error) {\n//         setInfo({ ...info, error: info.error });\n//       } else {\n//         const clientToken = info.clientToken;\n//         setInfo({ clientToken });\n//       }\n//     });\n//   };\n\n//   const showbtdropIn = () => {\n//     return (\n//       <div>\n//         {info.clientToken !== null && products.length > 0 ? (\n//           <div>\n//             <DropIn\n//               options={{ authorization: info.clientToken }}\n//               onInstance={instance => (info.instance = instance)}\n//             />\n//             <button className=\"btn btn-block btn-success\" onClick={onPurchase}>\n//               Buy\n//             </button>\n//           </div>\n//         ) : (\n//           <h3>Please login or add something to cart</h3>\n//         )}\n//       </div>\n//     );\n//   };\n\n//   useEffect(() => {\n//     getToken(userId, token);\n//   }, []);\n\n//   const onPurchase = () => {\n//     setInfo({ loading: true });\n//     let nonce;\n//     let getNonce = info.instance.requestPaymentMethod().then(data => {\n//       nonce = data.nonce;\n//       const paymentData = {\n//         paymentMethodNonce: nonce,\n//         amount: getAmount()\n//       };\n//       processPayment(userId, token, paymentData)\n//         .then(response => {\n//           setInfo({ ...info, success: response.success, loading: false });\n//           console.log(\"PAYMENT SUCCESS\");\n//           const orderData = {\n//             products: products,\n//             transaction_id: response.transaction.id,\n//             amount: response.transaction.amount\n//           };\n//           createOrder(userId, token, orderData);\n//           cartEmpty(() => {\n//             console.log(\"Did we got a crash?\");\n//           });\n\n//           setReload(!reload);\n//         })\n//         .catch(error => {\n//           setInfo({ loading: false, success: false });\n//           console.log(\"PAYMENT FAILED\");\n//         });\n//     });\n//   };\n\n//   const getAmount = () => {\n//     let amount = 0;\n//     products.map(p => {\n//       amount = amount + p.price;\n//     });\n//     return amount;\n//   };\n\n//   return (\n//     <div>\n//       <h3>Your bill is {getAmount()} $</h3>\n//       {showbtdropIn()}\n//     </div>\n//   );\n// };\n\n// export default Paymentb;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}