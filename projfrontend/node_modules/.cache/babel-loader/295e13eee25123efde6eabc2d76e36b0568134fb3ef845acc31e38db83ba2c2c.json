{"ast":null,"code":"var _jsxFileName = \"/Users/srihitha/Desktop/mern/projfrontend/src/user/StripeCheckout.js\",\n  _s = $RefreshSig$();\n// import React,{useState,useEffect} from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart,cartEmpty} from '../core/helper/cartHelper'\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n// const StripeCheckout = (products,setReload=f=>f,reload=undefined) => {\n\n//     const [data, setData] = useState({\n//         loading:false,\n//         error:false,\n//         success:false,\n//         address:\"\"\n\n//     })\n\n// const token = isAuthenticated() && isAuthenticated().token\n// const userId = isAuthenticated() && isAuthenticated().user._id\n\n//     console.log(products)\n\n//     // const makePayment = (token) => {\n//     //     const body = {token,products}\n//     //     const headers = {\n//     //         \"Content-Type\":\"application/json\",\n//     //     }\n//     //     return fetch(`${API}/stripepayment`,{\n//     //         method:\"POST\",\n//     //         headers,\n//     //         body:JSON.stringify(body)\n//     //     }).then(response =>{\n//     //         console.log(response)\n//     //         //call further methods\n//     //         const {status} = response;\n//     //         console.log(\"STATUS \" , status);\n\n//     //         cartEmpty(() => {\n//     //         console.log(\"Did we got a crash?\");\n//     //       });\n//     //       setReload(!reload);\n\n//     //     })\n//     //     .catch(error => {\n//     //       setData({ loading: false, success: false });\n//     //       console.log(\"PAYMENT FAILED\");\n//     //     });\n//     //     //.catch(error =>console.log(error))\n//     // }\n\n//     const makePayment = (token) => {\n//       const body = {token,products}\n//       const headers = {\n//         \"Content-Type\":\"application/json\",\n//       }\n//       return fetch(`${API}/stripepayment`,{\n//         method:\"POST\",\n//         headers,\n//         body:JSON.stringify(body)\n//       }).then(response =>{\n//         console.log(response)\n//         //call further methods\n//         const {status} = response;\n//         console.log(\"STATUS \" , status);\n\n//         cartEmpty(() => {\n//           console.log(\"Cart emptied\");\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n\n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log(\"PAYMENT FAILED\", error);\n//       });\n//     };\n\n//     const totalPrice = () => {\n//         try {\n//         let total = 0;\n//         products?.map((product) => {\n//             console.log(product)\n//             total = total + product.price;\n//         })\n//         //   return total;\n//         return total.toLocaleString(\"en-US\", {\n//             style: \"currency\",\n//             currency: \"USD\",\n//         });\n//         } catch \n//         (error) {\n//         console.log(error);\n//         }\n//     };\n\n//     const showStripeButton = () =>{\n//         return isAuthenticated() ? (\n//             <StripeCheckoutButton \n//             stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//             token={makePayment}\n//             amount={totalPrice() *100}\n//             name=\"Buy Products\"\n//             shippingAddress\n//             billingAddress\n//             >\n\n//                 <button  className=\"shadow-md rounded ml-3  px-3\" variant=\"primary\">Pay with Stripe</button></StripeCheckoutButton>\n\n//         ):(\n//             <Link to=\"/signin\"><button className=\"shadow-md rounded ml-3  px-3\" variant=\"warning\">SignIn</button></Link>\n//         )\n//     }\n\n// return (\n//     <div>\n//     <h2 className='text-dark'>StripeCheckout loaded </h2>\n//     <button className='text-white btn btn-lg bg-dark'>\n//         {/* {totalPrice()} */}\n\n//         </button>\n\n//     {/* {getFinalPrice()} */}\n//     {showStripeButton()}\n//     </div>\n//   )\n// }\n\n// export default StripeCheckout;\n\n// import React, { useState, useEffect } from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart, cartEmpty } from '../core/helper/cartHelper';\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n// const StripeCheckout = ({ products, setReload = f => f, reload = undefined }) => {\n//   const [data, setData] = useState({\n//     loading: false,\n//     error: false,\n//     success: false,\n//     address: ''\n//   });\n\n//   console.log(products);\n\n//   const makePayment = token => {\n//     const body = { token, products };\n//     const headers = {\n//       'Content-Type': 'application/json'\n//     };\n//     return fetch(`${API}/stripepayment`, {\n//       method: 'POST',\n//       headers,\n//       body: JSON.stringify(body)\n//     })\n//       .then(response => {\n//         console.log(response);\n//         const { status } = response;\n//         console.log('STATUS ', status);\n\n//         cartEmpty(() => {\n//           console.log('Cart emptied');\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log('PAYMENT FAILED', error);\n//       });\n//   };\n\n//   const performPayment = async (req, res) => {\n//   try {\n//     const { products, token } = req.body;\n\n//     let amount = 0;\n//     products.map((product) => {\n//       amount += product.price * product.count;\n//     });\n\n//     const customer = await stripe.customers.create({\n//       email: token.email,\n//       source: token.id,\n//       name: token.name,\n//       address: {\n//         line1: token.card.address_line1,\n//         line2: token.card.address_line2,\n//         city: token.card.address_city,\n//         state: token.card.address_state,\n//         country: token.card.address_country,\n//         postal_code: token.card.address_zip,\n//       },\n//     });\n\n//     const payment = await stripe.charges.create({\n//       amount: amount * 100,\n//       currency: \"inr\",\n//       customer: customer.id,\n//       receipt_email: token.email,\n//       description: \"Purchase of products\",\n//       shipping: {\n//         name: token.name,\n//         address: {\n//           line1: token.card.address_line1,\n//           line2: token.card.address_line2,\n//           city: token.card.address_city,\n//           state: token.card.address_state,\n//           country: token.card.address_country,\n//           postal_code: token.card.address_zip,\n//         },\n//       },\n//     });\n\n//     console.log(payment);\n//     res.json({\n//       success: true,\n//       message: \"Payment successful\",\n//     });\n//   } catch (error) {\n//     console.error(error);\n//     res.status(500).json({\n//       success: false,\n//       message: \"Payment failed\",\n//     });\n//   }\n// };\n\n//   const totalPrice = () => {\n//     try {\n//       let total = 0;\n//       if (products) {\n//         products.forEach(product => {\n//           console.log(product);\n//           total = total + product.price;\n//         });\n//       }\n//       return total.toLocaleString('en-US', {\n//         style: 'currency',\n//         currency: 'USD'\n//       });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   const showStripeButton = () => {\n//     return isAuthenticated() ? (\n//       <StripeCheckoutButton\n//         stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//         token={makePayment}\n//         amount={totalPrice() * 100}\n//         name='Buy Products'\n//         shippingAddress\n//         billingAddress>\n//         <button className='shadow-md rounded ml-3 px-3' variant='primary'>\n//           Pay with Stripe\n//         </button>\n//       </StripeCheckoutButton>\n//     ) : (\n//       <Link to='/signin'>\n//         <button className='shadow-md rounded ml-3 px-3' variant='warning'>\n//           SignIn\n//         </button>\n//       </Link>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {data.success && <h2>Payment successful!</h2>}\n//       <h2 className='text-dark'>StripeCheckout loaded </h2>\n//       <button className='text-white btn btn-lg bg-dark'></button>\n\n//       {showStripeButton()}\n//     </div>\n//   );\n// };\n\n// export default StripeCheckout;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Redirect } from \"react-router-dom\";\n// import { isAuthenticated } from \"../auth/helper\";\n// import { cartEmpty, loadCart } from \"./helper/cartHelper\";\n// import { getmeToken, processPayment } from \"./helper/paymentHelper\";\n// import { createOrder } from \"./helper/orderHelper\";\n// import DropIn from \"braintree-web-drop-in-react\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { Link } from \"react-router-dom\";\n// import { API } from \"../backend\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n\n// const Paymentb = ({ products, reload = undefined, setReload = (f) => f, setAlert = false }) => {\n//   const [info, setInfo] = useState({\n//     loading: false,\n//     success: false,\n//     clientToken: null,\n//     error: \"\",\n//     instance: {},\n//     address: \"\",\n//   });\n\n//   const userId = isAuthenticated() && isAuthenticated().user._id;\n//   const token = isAuthenticated() && isAuthenticated().token;\n\n//   const getToken = (userId, token) => {\n//     getmeToken(userId, token).then((info) => {\n//       console.log(\"INFORMATION\", info);\n//       if (info.error) {\n//         setInfo({ ...info, error: info.error });\n//       } else {\n//         const clientToken = info.clientToken;\n//         setInfo({ clientToken });\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     getToken(userId, token);\n//   }, []);\n\n//   const getAmount = () => {\n//     let amount = 0;\n//     products.map((p) => {\n//       amount = amount + parseInt(p.price);\n//     });\n//     return amount;\n//   };\n\n//   const onPurchase = () => {\n//     setInfo({ loading: true });\n//     let nonce;\n//     let getNonce = info.instance\n//       .requestPaymentMethod()\n//       .then((data) => {\n//         console.log(\"MYDATA\", data);\n//         nonce = data.nonce;\n//         const paymentData = {\n//           paymentMethodNonce: nonce,\n//           amount: getAmount(),\n//         };\n//         processPayment(userId, token, paymentData)\n//           .then((response) => {\n//             console.log(\"POINT 1\", response);\n//             if (response.error) {\n//               if (response.code == \"1\") {\n//                 console.log(\"PAYMENT FAILED\");\n//                 setAlert({\n//                   type: \"warning\",\n//                   message: \"Payment failed, please try again.\",\n//                 });\n//               }\n//             } else {\n//               setInfo({ ...info, success: response.success, loading: false });\n//               console.log(\"PAYMENT SUCCESS\");\n\n//               let product_names = \"\";\n//               products.forEach(function (item) {\n//                 product_names += item.name + \", \";\n//               });\n\n//               const orderData = {\n//                 products: product_names,\n//                 transaction_id: response.transaction.id,\n//                 amount: response.transaction.amount,\n//               };\n//               createOrder(userId, token, orderData)\n//                 .then((response) => {\n//                   if (response.error) {\n//                     if (response.code == \"1\") {\n//                       console.log(\"ORDER FAILED\");\n//                       setAlert({\n//                         type: \"warning\",\n//                         message: \"Order failed\",\n//                       });\n//                     }\n//                   } else {\n//                     if (response.success == true) {\n//                       console.log(\"ORDER PLACED\");\n//                       setAlert({\n//                         type: \"success\",\n//                         message: \"Order placed successfully\",\n//                       });\n//                       cartEmpty(() =>\n\nimport React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { isAuthenticated } from '../auth/helper';\nimport { cartEmpty } from '<div className=\"\"></div>/helper/cartHelper';\nimport { createOrder } from '../core/helper/OrderHelper';\nimport { getmeToken, processPayment } from './helper/paymentHelper';\nimport DropIn from 'braintree-web-drop-in-react';\nimport { API } from '../backend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StripeCheckout = _ref => {\n  _s();\n  let {\n    products,\n    setReload = f => f,\n    reload = undefined\n  } = _ref;\n  const [info, setInfo] = useState({\n    loading: false,\n    success: false,\n    clientToken: null,\n    error: '',\n    instance: {},\n    address: ''\n  });\n  const userId = isAuthenticated() && isAuthenticated().user._id;\n  const token = isAuthenticated() && isAuthenticated().token;\n  const getToken = (userId, token) => {\n    getmeToken(userId, token).then(info => {\n      if (info.error) {\n        setInfo({\n          ...info,\n          error: info.error\n        });\n      } else {\n        const clientToken = info.clientToken;\n        setInfo({\n          clientToken\n        });\n      }\n    });\n  };\n  useEffect(() => {\n    getToken(userId, token);\n  }, []);\n  const getAmount = () => {\n    let amount = 0;\n    products.map(p => {\n      amount = amount + p.price;\n    });\n    return amount;\n  };\n  const onPurchase = () => {\n    setInfo({\n      loading: true\n    });\n    let nonce;\n    let getNonce = info.instance.requestPaymentMethod().then(data => {\n      nonce = data.nonce;\n      const paymentData = {\n        paymentMethodNonce: nonce,\n        amount: getAmount()\n      };\n      processPayment(userId, token, paymentData).then(response => {\n        console.log('POINT 1', response);\n        if (response.error) {\n          if (response.code === '1') {\n            console.log('PAYMENT FAILED');\n            setInfo({\n              loading: false,\n              success: false\n            });\n          }\n        } else {\n          setInfo({\n            ...info,\n            success: response.success,\n            loading: false\n          });\n          console.log('PAYMENT SUCCESS');\n          let product_names = '';\n          products.forEach(function (item) {\n            product_names += item.name + ', ';\n          });\n          const orderData = {\n            products: product_names,\n            transaction_id: response.transaction.id,\n            amount: response.transaction.amount\n          };\n          createOrder(userId, token, orderData);\n          cartEmpty(() => {\n            console.log('Did we got a crash?');\n          });\n          setReload(!reload);\n        }\n      }).catch(error => {\n        setInfo({\n          loading: false,\n          success: false\n        });\n        console.log('PAYMENT FAILED', error);\n      });\n    }).catch(error => {\n      setInfo({\n        ...info,\n        error: error.message\n      });\n    });\n  };\n  const showbtdropin = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: info.clientToken !== null && products.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(DropIn, {\n          options: {\n            authorization: info.clientToken\n          },\n          onInstance: instance => info.instance = instance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-block btn-success\",\n          onClick: onPurchase,\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Please login or add something to cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this);\n  };\n  const successMessage = () => {\n    return `\n      <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n        Payment successful!\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n      </div>\n    `;\n  };\n  const errorMessage = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12 mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-danger\",\n          style: {\n            display: info.error ? '' : 'none'\n          },\n          children: info.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 5\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-white\",\n      children: [\"Stripe Checkout \", getAmount()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 5\n    }, this), showbtdropin(), successMessage(), errorMessage()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 539,\n    columnNumber: 5\n  }, this);\n};\n_s(StripeCheckout, \"abBPUBfz6nywiJzHp5qnS90ceDQ=\");\n_c = StripeCheckout;\nexport default StripeCheckout;\nvar _c;\n$RefreshReg$(_c, \"StripeCheckout\");","map":{"version":3,"names":["React","useState","useEffect","Redirect","isAuthenticated","cartEmpty","createOrder","getmeToken","processPayment","DropIn","API","jsxDEV","_jsxDEV","StripeCheckout","_ref","_s","products","setReload","f","reload","undefined","info","setInfo","loading","success","clientToken","error","instance","address","userId","user","_id","token","getToken","then","getAmount","amount","map","p","price","onPurchase","nonce","getNonce","requestPaymentMethod","data","paymentData","paymentMethodNonce","response","console","log","code","product_names","forEach","item","name","orderData","transaction_id","transaction","id","catch","message","showbtdropin","children","length","options","authorization","onInstance","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","successMessage","errorMessage","style","display","_c","$RefreshReg$"],"sources":["/Users/srihitha/Desktop/mern/projfrontend/src/user/StripeCheckout.js"],"sourcesContent":["// import React,{useState,useEffect} from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart,cartEmpty} from '../core/helper/cartHelper'\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n\n// const StripeCheckout = (products,setReload=f=>f,reload=undefined) => {\n\n//     const [data, setData] = useState({\n//         loading:false,\n//         error:false,\n//         success:false,\n//         address:\"\"\n\n//     })\n\n    // const token = isAuthenticated() && isAuthenticated().token\n    // const userId = isAuthenticated() && isAuthenticated().user._id\n\n//     console.log(products)\n\n//     // const makePayment = (token) => {\n//     //     const body = {token,products}\n//     //     const headers = {\n//     //         \"Content-Type\":\"application/json\",\n//     //     }\n//     //     return fetch(`${API}/stripepayment`,{\n//     //         method:\"POST\",\n//     //         headers,\n//     //         body:JSON.stringify(body)\n//     //     }).then(response =>{\n//     //         console.log(response)\n//     //         //call further methods\n//     //         const {status} = response;\n//     //         console.log(\"STATUS \" , status);\n\n//     //         cartEmpty(() => {\n//     //         console.log(\"Did we got a crash?\");\n//     //       });\n//     //       setReload(!reload);\n\n//     //     })\n//     //     .catch(error => {\n//     //       setData({ loading: false, success: false });\n//     //       console.log(\"PAYMENT FAILED\");\n//     //     });\n//     //     //.catch(error =>console.log(error))\n//     // }\n\n//     const makePayment = (token) => {\n//       const body = {token,products}\n//       const headers = {\n//         \"Content-Type\":\"application/json\",\n//       }\n//       return fetch(`${API}/stripepayment`,{\n//         method:\"POST\",\n//         headers,\n//         body:JSON.stringify(body)\n//       }).then(response =>{\n//         console.log(response)\n//         //call further methods\n//         const {status} = response;\n//         console.log(\"STATUS \" , status);\n    \n//         cartEmpty(() => {\n//           console.log(\"Cart emptied\");\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n\n    \n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log(\"PAYMENT FAILED\", error);\n//       });\n//     };\n\n    \n//     const totalPrice = () => {\n//         try {\n//         let total = 0;\n//         products?.map((product) => {\n//             console.log(product)\n//             total = total + product.price;\n//         })\n//         //   return total;\n//         return total.toLocaleString(\"en-US\", {\n//             style: \"currency\",\n//             currency: \"USD\",\n//         });\n//         } catch \n//         (error) {\n//         console.log(error);\n//         }\n//     };\n\n\n//     const showStripeButton = () =>{\n//         return isAuthenticated() ? (\n//             <StripeCheckoutButton \n//             stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//             token={makePayment}\n//             amount={totalPrice() *100}\n//             name=\"Buy Products\"\n//             shippingAddress\n//             billingAddress\n//             >\n                \n//                 <button  className=\"shadow-md rounded ml-3  px-3\" variant=\"primary\">Pay with Stripe</button></StripeCheckoutButton>\n            \n//         ):(\n//             <Link to=\"/signin\"><button className=\"shadow-md rounded ml-3  px-3\" variant=\"warning\">SignIn</button></Link>\n//         )\n//     }\n\n\n// return (\n//     <div>\n//     <h2 className='text-dark'>StripeCheckout loaded </h2>\n//     <button className='text-white btn btn-lg bg-dark'>\n//         {/* {totalPrice()} */}\n        \n//         </button>\n    \n\n//     {/* {getFinalPrice()} */}\n//     {showStripeButton()}\n//     </div>\n//   )\n// }\n\n// export default StripeCheckout;\n\n\n// import React, { useState, useEffect } from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart, cartEmpty } from '../core/helper/cartHelper';\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n// const StripeCheckout = ({ products, setReload = f => f, reload = undefined }) => {\n//   const [data, setData] = useState({\n//     loading: false,\n//     error: false,\n//     success: false,\n//     address: ''\n//   });\n\n//   console.log(products);\n\n//   const makePayment = token => {\n//     const body = { token, products };\n//     const headers = {\n//       'Content-Type': 'application/json'\n//     };\n//     return fetch(`${API}/stripepayment`, {\n//       method: 'POST',\n//       headers,\n//       body: JSON.stringify(body)\n//     })\n//       .then(response => {\n//         console.log(response);\n//         const { status } = response;\n//         console.log('STATUS ', status);\n\n//         cartEmpty(() => {\n//           console.log('Cart emptied');\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log('PAYMENT FAILED', error);\n//       });\n//   };\n\n//   const performPayment = async (req, res) => {\n//   try {\n//     const { products, token } = req.body;\n\n//     let amount = 0;\n//     products.map((product) => {\n//       amount += product.price * product.count;\n//     });\n\n//     const customer = await stripe.customers.create({\n//       email: token.email,\n//       source: token.id,\n//       name: token.name,\n//       address: {\n//         line1: token.card.address_line1,\n//         line2: token.card.address_line2,\n//         city: token.card.address_city,\n//         state: token.card.address_state,\n//         country: token.card.address_country,\n//         postal_code: token.card.address_zip,\n//       },\n//     });\n\n//     const payment = await stripe.charges.create({\n//       amount: amount * 100,\n//       currency: \"inr\",\n//       customer: customer.id,\n//       receipt_email: token.email,\n//       description: \"Purchase of products\",\n//       shipping: {\n//         name: token.name,\n//         address: {\n//           line1: token.card.address_line1,\n//           line2: token.card.address_line2,\n//           city: token.card.address_city,\n//           state: token.card.address_state,\n//           country: token.card.address_country,\n//           postal_code: token.card.address_zip,\n//         },\n//       },\n//     });\n\n//     console.log(payment);\n//     res.json({\n//       success: true,\n//       message: \"Payment successful\",\n//     });\n//   } catch (error) {\n//     console.error(error);\n//     res.status(500).json({\n//       success: false,\n//       message: \"Payment failed\",\n//     });\n//   }\n// };\n\n\n//   const totalPrice = () => {\n//     try {\n//       let total = 0;\n//       if (products) {\n//         products.forEach(product => {\n//           console.log(product);\n//           total = total + product.price;\n//         });\n//       }\n//       return total.toLocaleString('en-US', {\n//         style: 'currency',\n//         currency: 'USD'\n//       });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   const showStripeButton = () => {\n//     return isAuthenticated() ? (\n//       <StripeCheckoutButton\n//         stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//         token={makePayment}\n//         amount={totalPrice() * 100}\n//         name='Buy Products'\n//         shippingAddress\n//         billingAddress>\n//         <button className='shadow-md rounded ml-3 px-3' variant='primary'>\n//           Pay with Stripe\n//         </button>\n//       </StripeCheckoutButton>\n//     ) : (\n//       <Link to='/signin'>\n//         <button className='shadow-md rounded ml-3 px-3' variant='warning'>\n//           SignIn\n//         </button>\n//       </Link>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {data.success && <h2>Payment successful!</h2>}\n//       <h2 className='text-dark'>StripeCheckout loaded </h2>\n//       <button className='text-white btn btn-lg bg-dark'></button>\n\n//       {showStripeButton()}\n//     </div>\n//   );\n// };\n\n// export default StripeCheckout;\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { Redirect } from \"react-router-dom\";\n// import { isAuthenticated } from \"../auth/helper\";\n// import { cartEmpty, loadCart } from \"./helper/cartHelper\";\n// import { getmeToken, processPayment } from \"./helper/paymentHelper\";\n// import { createOrder } from \"./helper/orderHelper\";\n// import DropIn from \"braintree-web-drop-in-react\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { Link } from \"react-router-dom\";\n// import { API } from \"../backend\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n\n// const Paymentb = ({ products, reload = undefined, setReload = (f) => f, setAlert = false }) => {\n//   const [info, setInfo] = useState({\n//     loading: false,\n//     success: false,\n//     clientToken: null,\n//     error: \"\",\n//     instance: {},\n//     address: \"\",\n//   });\n\n//   const userId = isAuthenticated() && isAuthenticated().user._id;\n//   const token = isAuthenticated() && isAuthenticated().token;\n\n//   const getToken = (userId, token) => {\n//     getmeToken(userId, token).then((info) => {\n//       console.log(\"INFORMATION\", info);\n//       if (info.error) {\n//         setInfo({ ...info, error: info.error });\n//       } else {\n//         const clientToken = info.clientToken;\n//         setInfo({ clientToken });\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     getToken(userId, token);\n//   }, []);\n\n//   const getAmount = () => {\n//     let amount = 0;\n//     products.map((p) => {\n//       amount = amount + parseInt(p.price);\n//     });\n//     return amount;\n//   };\n\n//   const onPurchase = () => {\n//     setInfo({ loading: true });\n//     let nonce;\n//     let getNonce = info.instance\n//       .requestPaymentMethod()\n//       .then((data) => {\n//         console.log(\"MYDATA\", data);\n//         nonce = data.nonce;\n//         const paymentData = {\n//           paymentMethodNonce: nonce,\n//           amount: getAmount(),\n//         };\n//         processPayment(userId, token, paymentData)\n//           .then((response) => {\n//             console.log(\"POINT 1\", response);\n//             if (response.error) {\n//               if (response.code == \"1\") {\n//                 console.log(\"PAYMENT FAILED\");\n//                 setAlert({\n//                   type: \"warning\",\n//                   message: \"Payment failed, please try again.\",\n//                 });\n//               }\n//             } else {\n//               setInfo({ ...info, success: response.success, loading: false });\n//               console.log(\"PAYMENT SUCCESS\");\n\n//               let product_names = \"\";\n//               products.forEach(function (item) {\n//                 product_names += item.name + \", \";\n//               });\n\n//               const orderData = {\n//                 products: product_names,\n//                 transaction_id: response.transaction.id,\n//                 amount: response.transaction.amount,\n//               };\n//               createOrder(userId, token, orderData)\n//                 .then((response) => {\n//                   if (response.error) {\n//                     if (response.code == \"1\") {\n//                       console.log(\"ORDER FAILED\");\n//                       setAlert({\n//                         type: \"warning\",\n//                         message: \"Order failed\",\n//                       });\n//                     }\n//                   } else {\n//                     if (response.success == true) {\n//                       console.log(\"ORDER PLACED\");\n//                       setAlert({\n//                         type: \"success\",\n//                         message: \"Order placed successfully\",\n//                       });\n//                       cartEmpty(() =>\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { isAuthenticated } from '../auth/helper';\nimport { cartEmpty } from '<div className=\"\"></div>/helper/cartHelper';\nimport { createOrder } from '../core/helper/OrderHelper';\nimport { getmeToken, processPayment } from './helper/paymentHelper';\nimport DropIn from 'braintree-web-drop-in-react';\nimport { API } from '../backend';\n\nconst StripeCheckout = ({ products, setReload = (f) => f, reload = undefined }) => {\n  const [info, setInfo] = useState({\n    loading: false,\n    success: false,\n    clientToken: null,\n    error: '',\n    instance: {},\n    address: '',\n  });\n\n  const userId = isAuthenticated() && isAuthenticated().user._id;\n  const token = isAuthenticated() && isAuthenticated().token;\n\n  const getToken = (userId, token) => {\n    getmeToken(userId, token).then((info) => {\n      if (info.error) {\n        setInfo({ ...info, error: info.error });\n      } else {\n        const clientToken = info.clientToken;\n        setInfo({ clientToken });\n      }\n    });\n  };\n\n  useEffect(() => {\n    getToken(userId, token);\n  }, []);\n\n  const getAmount = () => {\n    let amount = 0;\n    products.map((p) => {\n      amount = amount + p.price;\n    });\n    return amount;\n  };\n\n  const onPurchase = () => {\n    setInfo({ loading: true });\n    let nonce;\n    let getNonce = info.instance\n      .requestPaymentMethod()\n      .then((data) => {\n        nonce = data.nonce;\n        const paymentData = {\n          paymentMethodNonce: nonce,\n          amount: getAmount(),\n        };\n        processPayment(userId, token, paymentData)\n          .then((response) => {\n            console.log('POINT 1', response);\n            if (response.error) {\n              if (response.code === '1') {\n                console.log('PAYMENT FAILED');\n                setInfo({ loading: false, success: false });\n              }\n            } else {\n              setInfo({ ...info, success: response.success, loading: false });\n              console.log('PAYMENT SUCCESS');\n              let product_names = '';\n              products.forEach(function (item) {\n                product_names += item.name + ', ';\n              });\n\n              const orderData = {\n                products: product_names,\n                transaction_id: response.transaction.id,\n                amount: response.transaction.amount,\n              };\n              createOrder(userId, token, orderData);\n              cartEmpty(() => {\n                console.log('Did we got a crash?');\n              });\n\n              setReload(!reload);\n            }\n          })\n          .catch((error) => {\n            setInfo({ loading: false, success: false });\n            console.log('PAYMENT FAILED', error);\n          });\n      })\n      .catch((error) => {\n        setInfo({ ...info, error: error.message });\n      });\n  };\n\n  const showbtdropin = () => {\n    return (\n      <div>\n        {info.clientToken !== null && products.length > 0 ? (\n          <div>\n            <DropIn\n              options={{ authorization: info.clientToken }}\n              onInstance={(instance) => (info.instance = instance)}\n            ></DropIn>\n            <button className=\"btn btn-block btn-success\" onClick={onPurchase}>\n              Buy\n            </button>\n          </div>\n        ) : (\n          <h3>Please login or add something to cart</h3>\n        )}\n      </div>\n    );\n  };\n\n  const successMessage = () => {\n    return `\n      <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n        Payment successful!\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n      </div>\n    `;\n  };\n  \n  const errorMessage = () => {\n    return (\n    <div className=\"row\">\n    <div className=\"col-md-12 mt-3\">\n    <div\n    className=\"alert alert-danger\"\n    style={{ display: info.error ? '' : 'none' }}\n    >\n    {info.error}\n    </div>\n    </div>\n    </div>\n    );\n    };\n    \n    return (\n    <div>\n    <h3 className=\"text-white\">Stripe Checkout {getAmount()}</h3>\n    {showbtdropin()}\n    {successMessage()}\n    {errorMessage()}\n    </div>\n    );\n    };\n    \n    export default StripeCheckout;\n    \n    \n    \n    "],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEI;AACA;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}