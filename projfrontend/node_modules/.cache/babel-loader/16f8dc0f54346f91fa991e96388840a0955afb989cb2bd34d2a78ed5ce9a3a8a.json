{"ast":null,"code":"var _jsxFileName = \"/Users/srihitha/Desktop/mern/projfrontend/src/user/StripeCheckout.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { isAuthenticated } from '../auth/helper';\nimport { loadCart, cartEmpty } from '../core/helper/cartHelper';\nimport { Link } from 'react-router-dom';\nimport StripeCheckoutButton from 'react-stripe-checkout';\nimport { API } from '../backend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StripeCheckout = function (products) {\n  _s();\n  let setReload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : f => f;\n  let reload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  const [data, setData] = useState({\n    loading: false,\n    error: false,\n    success: false,\n    address: \"\"\n  });\n  const token = isAuthenticated() && isAuthenticated().token;\n  const userId = isAuthenticated() && isAuthenticated().user._id;\n  console.log(products);\n\n  // const makePayment = (token) => {\n  //     const body = {token,products}\n  //     const headers = {\n  //         \"Content-Type\":\"application/json\",\n  //     }\n  //     return fetch(`${API}/stripepayment`,{\n  //         method:\"POST\",\n  //         headers,\n  //         body:JSON.stringify(body)\n  //     }).then(response =>{\n  //         console.log(response)\n  //         //call further methods\n  //         const {status} = response;\n  //         console.log(\"STATUS \" , status);\n\n  //         cartEmpty(() => {\n  //         console.log(\"Did we got a crash?\");\n  //       });\n  //       setReload(!reload);\n\n  //     })\n  //     .catch(error => {\n  //       setData({ loading: false, success: false });\n  //       console.log(\"PAYMENT FAILED\");\n  //     });\n  //     //.catch(error =>console.log(error))\n  // }\n\n  const makePayment = token => {\n    const body = {\n      token,\n      products\n    };\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    return fetch(`${API}/stripepayment`, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(body)\n    }).then(response => {\n      console.log(response);\n      //call further methods\n      const {\n        status\n      } = response;\n      console.log(\"STATUS \", status);\n      cartEmpty(() => {\n        console.log(\"Cart emptied\");\n      });\n      setReload(!reload);\n      setData({\n        loading: false,\n        success: true\n      });\n    }).catch(error => {\n      setData({\n        loading: false,\n        success: false\n      });\n      console.log(\"PAYMENT FAILED\", error);\n    });\n  };\n  const totalPrice = () => {\n    try {\n      let total = 0;\n      products === null || products === void 0 ? void 0 : products.map(product => {\n        console.log(product);\n        total = total + product.price;\n      });\n      //   return total;\n      return total.toLocaleString(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\"\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const showStripeButton = () => {\n    return isAuthenticated() ? /*#__PURE__*/_jsxDEV(StripeCheckoutButton, {\n      stripeKey: \"pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm\",\n      token: makePayment,\n      amount: totalPrice() * 100,\n      name: \"Buy Products\",\n      shippingAddress: true,\n      billingAddress: true,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"shadow-md rounded ml-3 m- px-3\",\n        variant: \"primary\",\n        children: \"Pay with Stripe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, _this) : /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/signin\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"shadow-md rounded ml-3  px-3\",\n        variant: \"warning\",\n        children: \"SignIn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 32\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, _this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-dark mb-5 \",\n      children: \"StripeCheckout loaded \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, _this), showStripeButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, _this);\n};\n_s(StripeCheckout, \"6CffkqB6SBOtGIJQG2w4Urs3D4Q=\");\n_c = StripeCheckout;\nexport default StripeCheckout;\n\n// import React, { useState, useEffect } from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart, cartEmpty } from '../core/helper/cartHelper';\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n// const StripeCheckout = ({ products, setReload = f => f, reload = undefined }) => {\n//   const [data, setData] = useState({\n//     loading: false,\n//     error: false,\n//     success: false,\n//     address: ''\n//   });\n\n//   console.log(products);\n\n//   const makePayment = token => {\n//     const body = { token, products };\n//     const headers = {\n//       'Content-Type': 'application/json'\n//     };\n//     return fetch(`${API}/stripepayment`, {\n//       method: 'POST',\n//       headers,\n//       body: JSON.stringify(body)\n//     })\n//       .then(response => {\n//         console.log(response);\n//         const { status } = response;\n//         console.log('STATUS ', status);\n\n//         cartEmpty(() => {\n//           console.log('Cart emptied');\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log('PAYMENT FAILED', error);\n//       });\n//   };\n\n//   const performPayment = async (req, res) => {\n//   try {\n//     const { products, token } = req.body;\n\n//     let amount = 0;\n//     products.map((product) => {\n//       amount += product.price * product.count;\n//     });\n\n//     const customer = await stripe.customers.create({\n//       email: token.email,\n//       source: token.id,\n//       name: token.name,\n//       address: {\n//         line1: token.card.address_line1,\n//         line2: token.card.address_line2,\n//         city: token.card.address_city,\n//         state: token.card.address_state,\n//         country: token.card.address_country,\n//         postal_code: token.card.address_zip,\n//       },\n//     });\n\n//     const payment = await stripe.charges.create({\n//       amount: amount * 100,\n//       currency: \"inr\",\n//       customer: customer.id,\n//       receipt_email: token.email,\n//       description: \"Purchase of products\",\n//       shipping: {\n//         name: token.name,\n//         address: {\n//           line1: token.card.address_line1,\n//           line2: token.card.address_line2,\n//           city: token.card.address_city,\n//           state: token.card.address_state,\n//           country: token.card.address_country,\n//           postal_code: token.card.address_zip,\n//         },\n//       },\n//     });\n\n//     console.log(payment);\n//     res.json({\n//       success: true,\n//       message: \"Payment successful\",\n//     });\n//   } catch (error) {\n//     console.error(error);\n//     res.status(500).json({\n//       success: false,\n//       message: \"Payment failed\",\n//     });\n//   }\n// };\n\n//   const totalPrice = () => {\n//     try {\n//       let total = 0;\n//       if (products) {\n//         products.forEach(product => {\n//           console.log(product);\n//           total = total + product.price;\n//         });\n//       }\n//       return total.toLocaleString('en-US', {\n//         style: 'currency',\n//         currency: 'USD'\n//       });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   const showStripeButton = () => {\n//     return isAuthenticated() ? (\n//       <StripeCheckoutButton\n//         stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//         token={makePayment}\n//         amount={totalPrice() * 100}\n//         name='Buy Products'\n//         shippingAddress\n//         billingAddress>\n//         <button className='shadow-md rounded ml-3 px-3' variant='primary'>\n//           Pay with Stripe\n//         </button>\n//       </StripeCheckoutButton>\n//     ) : (\n//       <Link to='/signin'>\n//         <button className='shadow-md rounded ml-3 px-3' variant='warning'>\n//           SignIn\n//         </button>\n//       </Link>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {data.success && <h2>Payment successful!</h2>}\n//       <h2 className='text-dark'>StripeCheckout loaded </h2>\n//       <button className='text-white btn btn-lg bg-dark'></button>\n\n//       {showStripeButton()}\n//     </div>\n//   );\n// };\n\n// export default StripeCheckout;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Redirect } from \"react-router-dom\";\n// import { isAuthenticated } from \"../auth/helper\";\n// import { cartEmpty, loadCart } from \"./helper/cartHelper\";\n// import { getmeToken, processPayment } from \"./helper/paymentHelper\";\n// import { createOrder } from \"./helper/orderHelper\";\n// import DropIn from \"braintree-web-drop-in-react\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { Link } from \"react-router-dom\";\n// import { API } from \"../backend\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n\n// const Paymentb = ({ products, reload = undefined, setReload = (f) => f, setAlert = false }) => {\n//   const [info, setInfo] = useState({\n//     loading: false,\n//     success: false,\n//     clientToken: null,\n//     error: \"\",\n//     instance: {},\n//     address: \"\",\n//   });\n\n//   const userId = isAuthenticated() && isAuthenticated().user._id;\n//   const token = isAuthenticated() && isAuthenticated().token;\n\n//   const getToken = (userId, token) => {\n//     getmeToken(userId, token).then((info) => {\n//       console.log(\"INFORMATION\", info);\n//       if (info.error) {\n//         setInfo({ ...info, error: info.error });\n//       } else {\n//         const clientToken = info.clientToken;\n//         setInfo({ clientToken });\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     getToken(userId, token);\n//   }, []);\n\n//   const getAmount = () => {\n//     let amount = 0;\n//     products.map((p) => {\n//       amount = amount + parseInt(p.price);\n//     });\n//     return amount;\n//   };\n\n//   const onPurchase = () => {\n//     setInfo({ loading: true });\n//     let nonce;\n//     let getNonce = info.instance\n//       .requestPaymentMethod()\n//       .then((data) => {\n//         console.log(\"MYDATA\", data);\n//         nonce = data.nonce;\n//         const paymentData = {\n//           paymentMethodNonce: nonce,\n//           amount: getAmount(),\n//         };\n//         processPayment(userId, token, paymentData)\n//           .then((response) => {\n//             console.log(\"POINT 1\", response);\n//             if (response.error) {\n//               if (response.code == \"1\") {\n//                 console.log(\"PAYMENT FAILED\");\n//                 setAlert({\n//                   type: \"warning\",\n//                   message: \"Payment failed, please try again.\",\n//                 });\n//               }\n//             } else {\n//               setInfo({ ...info, success: response.success, loading: false });\n//               console.log(\"PAYMENT SUCCESS\");\n\n//               let product_names = \"\";\n//               products.forEach(function (item) {\n//                 product_names += item.name + \", \";\n//               });\n\n//               const orderData = {\n//                 products: product_names,\n//                 transaction_id: response.transaction.id,\n//                 amount: response.transaction.amount,\n//               };\n//               createOrder(userId, token, orderData)\n//                 .then((response) => {\n//                   if (response.error) {\n//                     if (response.code == \"1\") {\n//                       console.log(\"ORDER FAILED\");\n//                       setAlert({\n//                         type: \"warning\",\n//                         message: \"Order failed\",\n//                       });\n//                     }\n//                   } else {\n//                     if (response.success == true) {\n//                       console.log(\"ORDER PLACED\");\n//                       setAlert({\n//                         type: \"success\",\n//                         message: \"Order placed successfully\",\n//                       });\n//                       cartEmpty(() =>\nvar _c;\n$RefreshReg$(_c, \"StripeCheckout\");","map":{"version":3,"names":["React","useState","useEffect","isAuthenticated","loadCart","cartEmpty","Link","StripeCheckoutButton","API","jsxDEV","_jsxDEV","StripeCheckout","products","_s","setReload","arguments","length","undefined","f","reload","data","setData","loading","error","success","address","token","userId","user","_id","console","log","makePayment","body","headers","fetch","method","JSON","stringify","then","response","status","catch","totalPrice","total","map","product","price","toLocaleString","style","currency","showStripeButton","stripeKey","amount","name","shippingAddress","billingAddress","children","className","variant","fileName","_jsxFileName","lineNumber","columnNumber","_this","to","_c","$RefreshReg$"],"sources":["/Users/srihitha/Desktop/mern/projfrontend/src/user/StripeCheckout.js"],"sourcesContent":["import React,{useState,useEffect} from 'react';\nimport { isAuthenticated } from '../auth/helper';\nimport { loadCart,cartEmpty} from '../core/helper/cartHelper'\nimport { Link } from 'react-router-dom';\nimport StripeCheckoutButton from 'react-stripe-checkout';\nimport { API } from '../backend';\n\n\nconst StripeCheckout = (products,setReload=f=>f,reload=undefined) => {\n\n    const [data, setData] = useState({\n        loading:false,\n        error:false,\n        success:false,\n        address:\"\"\n\n    })\n\n    const token = isAuthenticated() && isAuthenticated().token\n    const userId = isAuthenticated() && isAuthenticated().user._id\n\n    console.log(products)\n\n    // const makePayment = (token) => {\n    //     const body = {token,products}\n    //     const headers = {\n    //         \"Content-Type\":\"application/json\",\n    //     }\n    //     return fetch(`${API}/stripepayment`,{\n    //         method:\"POST\",\n    //         headers,\n    //         body:JSON.stringify(body)\n    //     }).then(response =>{\n    //         console.log(response)\n    //         //call further methods\n    //         const {status} = response;\n    //         console.log(\"STATUS \" , status);\n\n    //         cartEmpty(() => {\n    //         console.log(\"Did we got a crash?\");\n    //       });\n    //       setReload(!reload);\n\n    //     })\n    //     .catch(error => {\n    //       setData({ loading: false, success: false });\n    //       console.log(\"PAYMENT FAILED\");\n    //     });\n    //     //.catch(error =>console.log(error))\n    // }\n\n    const makePayment = (token) => {\n      const body = {token,products}\n      const headers = {\n        \"Content-Type\":\"application/json\",\n      }\n      return fetch(`${API}/stripepayment`,{\n        method:\"POST\",\n        headers,\n        body:JSON.stringify(body)\n      }).then(response =>{\n        console.log(response)\n        //call further methods\n        const {status} = response;\n        console.log(\"STATUS \" , status);\n    \n        cartEmpty(() => {\n          console.log(\"Cart emptied\");\n        });\n        setReload(!reload);\n        setData({ loading: false, success: true });\n\n    \n      })\n      .catch(error => {\n        setData({ loading: false, success: false });\n        console.log(\"PAYMENT FAILED\", error);\n      });\n    };\n\n    \n    const totalPrice = () => {\n        try {\n        let total = 0;\n        products?.map((product) => {\n            console.log(product)\n            total = total + product.price;\n        })\n        //   return total;\n        return total.toLocaleString(\"en-US\", {\n            style: \"currency\",\n            currency: \"USD\",\n        });\n        } catch \n        (error) {\n        console.log(error);\n        }\n    };\n\n\n    const showStripeButton = () =>{\n        return isAuthenticated() ? (\n            <StripeCheckoutButton \n            stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n            token={makePayment}\n            amount={totalPrice() *100}\n            name=\"Buy Products\"\n            shippingAddress\n            billingAddress\n            >\n                \n                <button  className=\"shadow-md rounded ml-3 m- px-3\" variant=\"primary\">Pay with Stripe</button></StripeCheckoutButton>\n            \n        ):(\n            <Link to=\"/signin\"><button className=\"shadow-md rounded ml-3  px-3\" variant=\"warning\">SignIn</button></Link>\n        )\n    }\n\n\nreturn (\n    <div>\n    <h2 className='text-dark mb-5 '>StripeCheckout loaded </h2>\n\n    {showStripeButton()}\n    </div>\n  )\n}\n\nexport default StripeCheckout;\n\n\n// import React, { useState, useEffect } from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart, cartEmpty } from '../core/helper/cartHelper';\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n// const StripeCheckout = ({ products, setReload = f => f, reload = undefined }) => {\n//   const [data, setData] = useState({\n//     loading: false,\n//     error: false,\n//     success: false,\n//     address: ''\n//   });\n\n//   console.log(products);\n\n//   const makePayment = token => {\n//     const body = { token, products };\n//     const headers = {\n//       'Content-Type': 'application/json'\n//     };\n//     return fetch(`${API}/stripepayment`, {\n//       method: 'POST',\n//       headers,\n//       body: JSON.stringify(body)\n//     })\n//       .then(response => {\n//         console.log(response);\n//         const { status } = response;\n//         console.log('STATUS ', status);\n\n//         cartEmpty(() => {\n//           console.log('Cart emptied');\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log('PAYMENT FAILED', error);\n//       });\n//   };\n\n//   const performPayment = async (req, res) => {\n//   try {\n//     const { products, token } = req.body;\n\n//     let amount = 0;\n//     products.map((product) => {\n//       amount += product.price * product.count;\n//     });\n\n//     const customer = await stripe.customers.create({\n//       email: token.email,\n//       source: token.id,\n//       name: token.name,\n//       address: {\n//         line1: token.card.address_line1,\n//         line2: token.card.address_line2,\n//         city: token.card.address_city,\n//         state: token.card.address_state,\n//         country: token.card.address_country,\n//         postal_code: token.card.address_zip,\n//       },\n//     });\n\n//     const payment = await stripe.charges.create({\n//       amount: amount * 100,\n//       currency: \"inr\",\n//       customer: customer.id,\n//       receipt_email: token.email,\n//       description: \"Purchase of products\",\n//       shipping: {\n//         name: token.name,\n//         address: {\n//           line1: token.card.address_line1,\n//           line2: token.card.address_line2,\n//           city: token.card.address_city,\n//           state: token.card.address_state,\n//           country: token.card.address_country,\n//           postal_code: token.card.address_zip,\n//         },\n//       },\n//     });\n\n//     console.log(payment);\n//     res.json({\n//       success: true,\n//       message: \"Payment successful\",\n//     });\n//   } catch (error) {\n//     console.error(error);\n//     res.status(500).json({\n//       success: false,\n//       message: \"Payment failed\",\n//     });\n//   }\n// };\n\n\n//   const totalPrice = () => {\n//     try {\n//       let total = 0;\n//       if (products) {\n//         products.forEach(product => {\n//           console.log(product);\n//           total = total + product.price;\n//         });\n//       }\n//       return total.toLocaleString('en-US', {\n//         style: 'currency',\n//         currency: 'USD'\n//       });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   const showStripeButton = () => {\n//     return isAuthenticated() ? (\n//       <StripeCheckoutButton\n//         stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//         token={makePayment}\n//         amount={totalPrice() * 100}\n//         name='Buy Products'\n//         shippingAddress\n//         billingAddress>\n//         <button className='shadow-md rounded ml-3 px-3' variant='primary'>\n//           Pay with Stripe\n//         </button>\n//       </StripeCheckoutButton>\n//     ) : (\n//       <Link to='/signin'>\n//         <button className='shadow-md rounded ml-3 px-3' variant='warning'>\n//           SignIn\n//         </button>\n//       </Link>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {data.success && <h2>Payment successful!</h2>}\n//       <h2 className='text-dark'>StripeCheckout loaded </h2>\n//       <button className='text-white btn btn-lg bg-dark'></button>\n\n//       {showStripeButton()}\n//     </div>\n//   );\n// };\n\n// export default StripeCheckout;\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { Redirect } from \"react-router-dom\";\n// import { isAuthenticated } from \"../auth/helper\";\n// import { cartEmpty, loadCart } from \"./helper/cartHelper\";\n// import { getmeToken, processPayment } from \"./helper/paymentHelper\";\n// import { createOrder } from \"./helper/orderHelper\";\n// import DropIn from \"braintree-web-drop-in-react\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { Link } from \"react-router-dom\";\n// import { API } from \"../backend\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n\n// const Paymentb = ({ products, reload = undefined, setReload = (f) => f, setAlert = false }) => {\n//   const [info, setInfo] = useState({\n//     loading: false,\n//     success: false,\n//     clientToken: null,\n//     error: \"\",\n//     instance: {},\n//     address: \"\",\n//   });\n\n//   const userId = isAuthenticated() && isAuthenticated().user._id;\n//   const token = isAuthenticated() && isAuthenticated().token;\n\n//   const getToken = (userId, token) => {\n//     getmeToken(userId, token).then((info) => {\n//       console.log(\"INFORMATION\", info);\n//       if (info.error) {\n//         setInfo({ ...info, error: info.error });\n//       } else {\n//         const clientToken = info.clientToken;\n//         setInfo({ clientToken });\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     getToken(userId, token);\n//   }, []);\n\n//   const getAmount = () => {\n//     let amount = 0;\n//     products.map((p) => {\n//       amount = amount + parseInt(p.price);\n//     });\n//     return amount;\n//   };\n\n//   const onPurchase = () => {\n//     setInfo({ loading: true });\n//     let nonce;\n//     let getNonce = info.instance\n//       .requestPaymentMethod()\n//       .then((data) => {\n//         console.log(\"MYDATA\", data);\n//         nonce = data.nonce;\n//         const paymentData = {\n//           paymentMethodNonce: nonce,\n//           amount: getAmount(),\n//         };\n//         processPayment(userId, token, paymentData)\n//           .then((response) => {\n//             console.log(\"POINT 1\", response);\n//             if (response.error) {\n//               if (response.code == \"1\") {\n//                 console.log(\"PAYMENT FAILED\");\n//                 setAlert({\n//                   type: \"warning\",\n//                   message: \"Payment failed, please try again.\",\n//                 });\n//               }\n//             } else {\n//               setInfo({ ...info, success: response.success, loading: false });\n//               console.log(\"PAYMENT SUCCESS\");\n\n//               let product_names = \"\";\n//               products.forEach(function (item) {\n//                 product_names += item.name + \", \";\n//               });\n\n//               const orderData = {\n//                 products: product_names,\n//                 transaction_id: response.transaction.id,\n//                 amount: response.transaction.amount,\n//               };\n//               createOrder(userId, token, orderData)\n//                 .then((response) => {\n//                   if (response.error) {\n//                     if (response.code == \"1\") {\n//                       console.log(\"ORDER FAILED\");\n//                       setAlert({\n//                         type: \"warning\",\n//                         message: \"Order failed\",\n//                       });\n//                     }\n//                   } else {\n//                     if (response.success == true) {\n//                       console.log(\"ORDER PLACED\");\n//                       setAlert({\n//                         type: \"success\",\n//                         message: \"Order placed successfully\",\n//                       });\n//                       cartEmpty(() =>\n\n\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}