{"ast":null,"code":"// import React,{useState,useEffect} from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart,cartEmpty} from '../core/helper/cartHelper'\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n// const StripeCheckout = (products,setReload=f=>f,reload=undefined) => {\n\n//     const [data, setData] = useState({\n//         loading:false,\n//         error:false,\n//         success:false,\n//         address:\"\"\n\n//     })\n\n// const token = isAuthenticated() && isAuthenticated().token\n// const userId = isAuthenticated() && isAuthenticated().user._id\n\n//     console.log(products)\n\n//     // const makePayment = (token) => {\n//     //     const body = {token,products}\n//     //     const headers = {\n//     //         \"Content-Type\":\"application/json\",\n//     //     }\n//     //     return fetch(`${API}/stripepayment`,{\n//     //         method:\"POST\",\n//     //         headers,\n//     //         body:JSON.stringify(body)\n//     //     }).then(response =>{\n//     //         console.log(response)\n//     //         //call further methods\n//     //         const {status} = response;\n//     //         console.log(\"STATUS \" , status);\n\n//     //         cartEmpty(() => {\n//     //         console.log(\"Did we got a crash?\");\n//     //       });\n//     //       setReload(!reload);\n\n//     //     })\n//     //     .catch(error => {\n//     //       setData({ loading: false, success: false });\n//     //       console.log(\"PAYMENT FAILED\");\n//     //     });\n//     //     //.catch(error =>console.log(error))\n//     // }\n\n//     const makePayment = (token) => {\n//       const body = {token,products}\n//       const headers = {\n//         \"Content-Type\":\"application/json\",\n//       }\n//       return fetch(`${API}/stripepayment`,{\n//         method:\"POST\",\n//         headers,\n//         body:JSON.stringify(body)\n//       }).then(response =>{\n//         console.log(response)\n//         //call further methods\n//         const {status} = response;\n//         console.log(\"STATUS \" , status);\n\n//         cartEmpty(() => {\n//           console.log(\"Cart emptied\");\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n\n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log(\"PAYMENT FAILED\", error);\n//       });\n//     };\n\n//     const totalPrice = () => {\n//         try {\n//         let total = 0;\n//         products?.map((product) => {\n//             console.log(product)\n//             total = total + product.price;\n//         })\n//         //   return total;\n//         return total.toLocaleString(\"en-US\", {\n//             style: \"currency\",\n//             currency: \"USD\",\n//         });\n//         } catch \n//         (error) {\n//         console.log(error);\n//         }\n//     };\n\n//     const showStripeButton = () =>{\n//         return isAuthenticated() ? (\n//             <StripeCheckoutButton \n//             stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//             token={makePayment}\n//             amount={totalPrice() *100}\n//             name=\"Buy Products\"\n//             shippingAddress\n//             billingAddress\n//             >\n\n//                 <button  className=\"shadow-md rounded ml-3  px-3\" variant=\"primary\">Pay with Stripe</button></StripeCheckoutButton>\n\n//         ):(\n//             <Link to=\"/signin\"><button className=\"shadow-md rounded ml-3  px-3\" variant=\"warning\">SignIn</button></Link>\n//         )\n//     }\n\n// return (\n//     <div>\n//     <h2 className='text-dark'>StripeCheckout loaded </h2>\n//     <button className='text-white btn btn-lg bg-dark'>\n//         {/* {totalPrice()} */}\n\n//         </button>\n\n//     {/* {getFinalPrice()} */}\n//     {showStripeButton()}\n//     </div>\n//   )\n// }\n\n// export default StripeCheckout;\n\n// import React, { useState, useEffect } from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart, cartEmpty } from '../core/helper/cartHelper';\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n// const StripeCheckout = ({ products, setReload = f => f, reload = undefined }) => {\n//   const [data, setData] = useState({\n//     loading: false,\n//     error: false,\n//     success: false,\n//     address: ''\n//   });\n\n//   console.log(products);\n\n//   const makePayment = token => {\n//     const body = { token, products };\n//     const headers = {\n//       'Content-Type': 'application/json'\n//     };\n//     return fetch(`${API}/stripepayment`, {\n//       method: 'POST',\n//       headers,\n//       body: JSON.stringify(body)\n//     })\n//       .then(response => {\n//         console.log(response);\n//         const { status } = response;\n//         console.log('STATUS ', status);\n\n//         cartEmpty(() => {\n//           console.log('Cart emptied');\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log('PAYMENT FAILED', error);\n//       });\n//   };\n\n//   const performPayment = async (req, res) => {\n//   try {\n//     const { products, token } = req.body;\n\n//     let amount = 0;\n//     products.map((product) => {\n//       amount += product.price * product.count;\n//     });\n\n//     const customer = await stripe.customers.create({\n//       email: token.email,\n//       source: token.id,\n//       name: token.name,\n//       address: {\n//         line1: token.card.address_line1,\n//         line2: token.card.address_line2,\n//         city: token.card.address_city,\n//         state: token.card.address_state,\n//         country: token.card.address_country,\n//         postal_code: token.card.address_zip,\n//       },\n//     });\n\n//     const payment = await stripe.charges.create({\n//       amount: amount * 100,\n//       currency: \"inr\",\n//       customer: customer.id,\n//       receipt_email: token.email,\n//       description: \"Purchase of products\",\n//       shipping: {\n//         name: token.name,\n//         address: {\n//           line1: token.card.address_line1,\n//           line2: token.card.address_line2,\n//           city: token.card.address_city,\n//           state: token.card.address_state,\n//           country: token.card.address_country,\n//           postal_code: token.card.address_zip,\n//         },\n//       },\n//     });\n\n//     console.log(payment);\n//     res.json({\n//       success: true,\n//       message: \"Payment successful\",\n//     });\n//   } catch (error) {\n//     console.error(error);\n//     res.status(500).json({\n//       success: false,\n//       message: \"Payment failed\",\n//     });\n//   }\n// };\n\n//   const totalPrice = () => {\n//     try {\n//       let total = 0;\n//       if (products) {\n//         products.forEach(product => {\n//           console.log(product);\n//           total = total + product.price;\n//         });\n//       }\n//       return total.toLocaleString('en-US', {\n//         style: 'currency',\n//         currency: 'USD'\n//       });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   const showStripeButton = () => {\n//     return isAuthenticated() ? (\n//       <StripeCheckoutButton\n//         stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//         token={makePayment}\n//         amount={totalPrice() * 100}\n//         name='Buy Products'\n//         shippingAddress\n//         billingAddress>\n//         <button className='shadow-md rounded ml-3 px-3' variant='primary'>\n//           Pay with Stripe\n//         </button>\n//       </StripeCheckoutButton>\n//     ) : (\n//       <Link to='/signin'>\n//         <button className='shadow-md rounded ml-3 px-3' variant='warning'>\n//           SignIn\n//         </button>\n//       </Link>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {data.success && <h2>Payment successful!</h2>}\n//       <h2 className='text-dark'>StripeCheckout loaded </h2>\n//       <button className='text-white btn btn-lg bg-dark'></button>\n\n//       {showStripeButton()}\n//     </div>\n//   );\n// };\n\n// export default StripeCheckout;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Redirect } from \"react-router-dom\";\n// import { isAuthenticated } from \"../auth/helper\";\n// import { cartEmpty, loadCart } from \"./helper/cartHelper\";\n// import { getmeToken, processPayment } from \"./helper/paymentHelper\";\n// import { createOrder } from \"./helper/orderHelper\";\n// import DropIn from \"braintree-web-drop-in-react\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { Link } from \"react-router-dom\";\n// import { API } from \"../backend\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n\n// const Paymentb = ({ products, reload = undefined, setReload = (f) => f, setAlert = false }) => {\n//   const [info, setInfo] = useState({\n//     loading: false,\n//     success: false,\n//     clientToken: null,\n//     error: \"\",\n//     instance: {},\n//     address: \"\",\n//   });\n\n//   const userId = isAuthenticated() && isAuthenticated().user._id;\n//   const token = isAuthenticated() && isAuthenticated().token;\n\n//   const getToken = (userId, token) => {\n//     getmeToken(userId, token).then((info) => {\n//       console.log(\"INFORMATION\", info);\n//       if (info.error) {\n//         setInfo({ ...info, error: info.error });\n//       } else {\n//         const clientToken = info.clientToken;\n//         setInfo({ clientToken });\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     getToken(userId, token);\n//   }, []);\n\n//   const getAmount = () => {\n//     let amount = 0;\n//     products.map((p) => {\n//       amount = amount + parseInt(p.price);\n//     });\n//     return amount;\n//   };\n\n//   const onPurchase = () => {\n//     setInfo({ loading: true });\n//     let nonce;\n//     let getNonce = info.instance\n//       .requestPaymentMethod()\n//       .then((data) => {\n//         console.log(\"MYDATA\", data);\n//         nonce = data.nonce;\n//         const paymentData = {\n//           paymentMethodNonce: nonce,\n//           amount: getAmount(),\n//         };\n//         processPayment(userId, token, paymentData)\n//           .then((response) => {\n//             console.log(\"POINT 1\", response);\n//             if (response.error) {\n//               if (response.code == \"1\") {\n//                 console.log(\"PAYMENT FAILED\");\n//                 setAlert({\n//                   type: \"warning\",\n//                   message: \"Payment failed, please try again.\",\n//                 });\n//               }\n//             } else {\n//               setInfo({ ...info, success: response.success, loading: false });\n//               console.log(\"PAYMENT SUCCESS\");\n\n//               let product_names = \"\";\n//               products.forEach(function (item) {\n//                 product_names += item.name + \", \";\n//               });\n\n//               const orderData = {\n//                 products: product_names,\n//                 transaction_id: response.transaction.id,\n//                 amount: response.transaction.amount,\n//               };\n//               createOrder(userId, token, orderData)\n//                 .then((response) => {\n//                   if (response.error) {\n//                     if (response.code == \"1\") {\n//                       console.log(\"ORDER FAILED\");\n//                       setAlert({\n//                         type: \"warning\",\n//                         message: \"Order failed\",\n//                       });\n//                     }\n//                   } else {\n//                     if (response.success == true) {\n//                       console.log(\"ORDER PLACED\");\n//                       setAlert({\n//                         type: \"success\",\n//                         message: \"Order placed successfully\",\n//                       });\n//                       cartEmpty(() =>","map":{"version":3,"names":[],"sources":["/Users/srihitha/Desktop/mern/projfrontend/src/user/StripeCheckout.js"],"sourcesContent":["// import React,{useState,useEffect} from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart,cartEmpty} from '../core/helper/cartHelper'\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n\n// const StripeCheckout = (products,setReload=f=>f,reload=undefined) => {\n\n//     const [data, setData] = useState({\n//         loading:false,\n//         error:false,\n//         success:false,\n//         address:\"\"\n\n//     })\n\n    // const token = isAuthenticated() && isAuthenticated().token\n    // const userId = isAuthenticated() && isAuthenticated().user._id\n\n//     console.log(products)\n\n//     // const makePayment = (token) => {\n//     //     const body = {token,products}\n//     //     const headers = {\n//     //         \"Content-Type\":\"application/json\",\n//     //     }\n//     //     return fetch(`${API}/stripepayment`,{\n//     //         method:\"POST\",\n//     //         headers,\n//     //         body:JSON.stringify(body)\n//     //     }).then(response =>{\n//     //         console.log(response)\n//     //         //call further methods\n//     //         const {status} = response;\n//     //         console.log(\"STATUS \" , status);\n\n//     //         cartEmpty(() => {\n//     //         console.log(\"Did we got a crash?\");\n//     //       });\n//     //       setReload(!reload);\n\n//     //     })\n//     //     .catch(error => {\n//     //       setData({ loading: false, success: false });\n//     //       console.log(\"PAYMENT FAILED\");\n//     //     });\n//     //     //.catch(error =>console.log(error))\n//     // }\n\n//     const makePayment = (token) => {\n//       const body = {token,products}\n//       const headers = {\n//         \"Content-Type\":\"application/json\",\n//       }\n//       return fetch(`${API}/stripepayment`,{\n//         method:\"POST\",\n//         headers,\n//         body:JSON.stringify(body)\n//       }).then(response =>{\n//         console.log(response)\n//         //call further methods\n//         const {status} = response;\n//         console.log(\"STATUS \" , status);\n    \n//         cartEmpty(() => {\n//           console.log(\"Cart emptied\");\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n\n    \n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log(\"PAYMENT FAILED\", error);\n//       });\n//     };\n\n    \n//     const totalPrice = () => {\n//         try {\n//         let total = 0;\n//         products?.map((product) => {\n//             console.log(product)\n//             total = total + product.price;\n//         })\n//         //   return total;\n//         return total.toLocaleString(\"en-US\", {\n//             style: \"currency\",\n//             currency: \"USD\",\n//         });\n//         } catch \n//         (error) {\n//         console.log(error);\n//         }\n//     };\n\n\n//     const showStripeButton = () =>{\n//         return isAuthenticated() ? (\n//             <StripeCheckoutButton \n//             stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//             token={makePayment}\n//             amount={totalPrice() *100}\n//             name=\"Buy Products\"\n//             shippingAddress\n//             billingAddress\n//             >\n                \n//                 <button  className=\"shadow-md rounded ml-3  px-3\" variant=\"primary\">Pay with Stripe</button></StripeCheckoutButton>\n            \n//         ):(\n//             <Link to=\"/signin\"><button className=\"shadow-md rounded ml-3  px-3\" variant=\"warning\">SignIn</button></Link>\n//         )\n//     }\n\n\n// return (\n//     <div>\n//     <h2 className='text-dark'>StripeCheckout loaded </h2>\n//     <button className='text-white btn btn-lg bg-dark'>\n//         {/* {totalPrice()} */}\n        \n//         </button>\n    \n\n//     {/* {getFinalPrice()} */}\n//     {showStripeButton()}\n//     </div>\n//   )\n// }\n\n// export default StripeCheckout;\n\n\n// import React, { useState, useEffect } from 'react';\n// import { isAuthenticated } from '../auth/helper';\n// import { loadCart, cartEmpty } from '../core/helper/cartHelper';\n// import { Link } from 'react-router-dom';\n// import StripeCheckoutButton from 'react-stripe-checkout';\n// import { API } from '../backend';\n\n// const StripeCheckout = ({ products, setReload = f => f, reload = undefined }) => {\n//   const [data, setData] = useState({\n//     loading: false,\n//     error: false,\n//     success: false,\n//     address: ''\n//   });\n\n//   console.log(products);\n\n//   const makePayment = token => {\n//     const body = { token, products };\n//     const headers = {\n//       'Content-Type': 'application/json'\n//     };\n//     return fetch(`${API}/stripepayment`, {\n//       method: 'POST',\n//       headers,\n//       body: JSON.stringify(body)\n//     })\n//       .then(response => {\n//         console.log(response);\n//         const { status } = response;\n//         console.log('STATUS ', status);\n\n//         cartEmpty(() => {\n//           console.log('Cart emptied');\n//         });\n//         setReload(!reload);\n//         setData({ loading: false, success: true });\n//       })\n//       .catch(error => {\n//         setData({ loading: false, success: false });\n//         console.log('PAYMENT FAILED', error);\n//       });\n//   };\n\n//   const performPayment = async (req, res) => {\n//   try {\n//     const { products, token } = req.body;\n\n//     let amount = 0;\n//     products.map((product) => {\n//       amount += product.price * product.count;\n//     });\n\n//     const customer = await stripe.customers.create({\n//       email: token.email,\n//       source: token.id,\n//       name: token.name,\n//       address: {\n//         line1: token.card.address_line1,\n//         line2: token.card.address_line2,\n//         city: token.card.address_city,\n//         state: token.card.address_state,\n//         country: token.card.address_country,\n//         postal_code: token.card.address_zip,\n//       },\n//     });\n\n//     const payment = await stripe.charges.create({\n//       amount: amount * 100,\n//       currency: \"inr\",\n//       customer: customer.id,\n//       receipt_email: token.email,\n//       description: \"Purchase of products\",\n//       shipping: {\n//         name: token.name,\n//         address: {\n//           line1: token.card.address_line1,\n//           line2: token.card.address_line2,\n//           city: token.card.address_city,\n//           state: token.card.address_state,\n//           country: token.card.address_country,\n//           postal_code: token.card.address_zip,\n//         },\n//       },\n//     });\n\n//     console.log(payment);\n//     res.json({\n//       success: true,\n//       message: \"Payment successful\",\n//     });\n//   } catch (error) {\n//     console.error(error);\n//     res.status(500).json({\n//       success: false,\n//       message: \"Payment failed\",\n//     });\n//   }\n// };\n\n\n//   const totalPrice = () => {\n//     try {\n//       let total = 0;\n//       if (products) {\n//         products.forEach(product => {\n//           console.log(product);\n//           total = total + product.price;\n//         });\n//       }\n//       return total.toLocaleString('en-US', {\n//         style: 'currency',\n//         currency: 'USD'\n//       });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   const showStripeButton = () => {\n//     return isAuthenticated() ? (\n//       <StripeCheckoutButton\n//         stripeKey='pk_test_51HJysRKt8ejHlHuS6FhC1jRheNPyKPp58VGkf0ZWNnjVbjImMzGyyhKgHGHK1CtKjXda3AydrikJ7Ccwm8yZuSVn00hSegmBxm'\n//         token={makePayment}\n//         amount={totalPrice() * 100}\n//         name='Buy Products'\n//         shippingAddress\n//         billingAddress>\n//         <button className='shadow-md rounded ml-3 px-3' variant='primary'>\n//           Pay with Stripe\n//         </button>\n//       </StripeCheckoutButton>\n//     ) : (\n//       <Link to='/signin'>\n//         <button className='shadow-md rounded ml-3 px-3' variant='warning'>\n//           SignIn\n//         </button>\n//       </Link>\n//     );\n//   };\n\n//   return (\n//     <div>\n//       {data.success && <h2>Payment successful!</h2>}\n//       <h2 className='text-dark'>StripeCheckout loaded </h2>\n//       <button className='text-white btn btn-lg bg-dark'></button>\n\n//       {showStripeButton()}\n//     </div>\n//   );\n// };\n\n// export default StripeCheckout;\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { Redirect } from \"react-router-dom\";\n// import { isAuthenticated } from \"../auth/helper\";\n// import { cartEmpty, loadCart } from \"./helper/cartHelper\";\n// import { getmeToken, processPayment } from \"./helper/paymentHelper\";\n// import { createOrder } from \"./helper/orderHelper\";\n// import DropIn from \"braintree-web-drop-in-react\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { Link } from \"react-router-dom\";\n// import { API } from \"../backend\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n\n// const Paymentb = ({ products, reload = undefined, setReload = (f) => f, setAlert = false }) => {\n//   const [info, setInfo] = useState({\n//     loading: false,\n//     success: false,\n//     clientToken: null,\n//     error: \"\",\n//     instance: {},\n//     address: \"\",\n//   });\n\n//   const userId = isAuthenticated() && isAuthenticated().user._id;\n//   const token = isAuthenticated() && isAuthenticated().token;\n\n//   const getToken = (userId, token) => {\n//     getmeToken(userId, token).then((info) => {\n//       console.log(\"INFORMATION\", info);\n//       if (info.error) {\n//         setInfo({ ...info, error: info.error });\n//       } else {\n//         const clientToken = info.clientToken;\n//         setInfo({ clientToken });\n//       }\n//     });\n//   };\n\n//   useEffect(() => {\n//     getToken(userId, token);\n//   }, []);\n\n//   const getAmount = () => {\n//     let amount = 0;\n//     products.map((p) => {\n//       amount = amount + parseInt(p.price);\n//     });\n//     return amount;\n//   };\n\n//   const onPurchase = () => {\n//     setInfo({ loading: true });\n//     let nonce;\n//     let getNonce = info.instance\n//       .requestPaymentMethod()\n//       .then((data) => {\n//         console.log(\"MYDATA\", data);\n//         nonce = data.nonce;\n//         const paymentData = {\n//           paymentMethodNonce: nonce,\n//           amount: getAmount(),\n//         };\n//         processPayment(userId, token, paymentData)\n//           .then((response) => {\n//             console.log(\"POINT 1\", response);\n//             if (response.error) {\n//               if (response.code == \"1\") {\n//                 console.log(\"PAYMENT FAILED\");\n//                 setAlert({\n//                   type: \"warning\",\n//                   message: \"Payment failed, please try again.\",\n//                 });\n//               }\n//             } else {\n//               setInfo({ ...info, success: response.success, loading: false });\n//               console.log(\"PAYMENT SUCCESS\");\n\n//               let product_names = \"\";\n//               products.forEach(function (item) {\n//                 product_names += item.name + \", \";\n//               });\n\n//               const orderData = {\n//                 products: product_names,\n//                 transaction_id: response.transaction.id,\n//                 amount: response.transaction.amount,\n//               };\n//               createOrder(userId, token, orderData)\n//                 .then((response) => {\n//                   if (response.error) {\n//                     if (response.code == \"1\") {\n//                       console.log(\"ORDER FAILED\");\n//                       setAlert({\n//                         type: \"warning\",\n//                         message: \"Order failed\",\n//                       });\n//                     }\n//                   } else {\n//                     if (response.success == true) {\n//                       console.log(\"ORDER PLACED\");\n//                       setAlert({\n//                         type: \"success\",\n//                         message: \"Order placed successfully\",\n//                       });\n//                       cartEmpty(() =>\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEI;AACA;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}