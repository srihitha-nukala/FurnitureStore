{"ast":null,"code":"var _jsxFileName = \"/Users/srihitha/Desktop/mern/projfrontend/src/user/StripeCheckout.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { isAuthenticated } from \"../auth/helper\";\nimport { cartEmpty, loadCart } from \"./helper/cartHelper\";\nimport { Link } from \"react-router-dom\";\nimport StripeCheckoutButton from \"react-stripe-checkout\";\nimport { API } from \"../backend\";\nimport { createOrder } from \"./helper/OrderHelper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StripeCheckout = _ref => {\n  _s();\n  let {\n    products,\n    setReload = f => f,\n    reload = undefined\n  } = _ref;\n  const [data, setData] = useState({\n    loading: false,\n    success: false,\n    error: \"\",\n    address: \"\"\n  });\n  const token = isAuthenticated() && isAuthenticated().token;\n  const userId = isAuthenticated() && isAuthenticated().user._id;\n  const getFinalAmount = () => {\n    let amount = 0;\n    products.map(p => {\n      amount = amount + p.price;\n    });\n    return amount;\n  };\n  const makePayment = token => {\n    const body = {\n      token,\n      products\n    };\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    return fetch(`${API}/stripepayment`, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(body)\n    }).then(response => {\n      console.log(response);\n      //call further methods\n    }).catch(error => console.log(error));\n  };\n  const showStripeButton = () => {\n    return isAutheticated() ? /*#__PURE__*/_jsxDEV(StripeCheckoutButton, {\n      stripeKey: \"\",\n      token: makePayment,\n      amount: getFinalAmount() * 100,\n      name: \"Buy Tshirts\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        children: \"Pay with stripe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/signin\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning\",\n        children: \"Signin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-white\",\n      children: [\"Stripe Checkout \", getFinalAmount()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), showStripeButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(StripeCheckout, \"0h2XWCfFcauINIuXGewy5vaEKUo=\");\n_c = StripeCheckout;\nexport default StripeCheckout;\nvar _c;\n$RefreshReg$(_c, \"StripeCheckout\");","map":{"version":3,"names":["React","useState","useEffect","isAuthenticated","cartEmpty","loadCart","Link","StripeCheckoutButton","API","createOrder","jsxDEV","_jsxDEV","StripeCheckout","_ref","_s","products","setReload","f","reload","undefined","data","setData","loading","success","error","address","token","userId","user","_id","getFinalAmount","amount","map","p","price","makePayment","body","headers","fetch","method","JSON","stringify","then","response","console","log","catch","showStripeButton","isAutheticated","stripeKey","name","children","className","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/Users/srihitha/Desktop/mern/projfrontend/src/user/StripeCheckout.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { isAuthenticated } from \"../auth/helper\";\nimport { cartEmpty, loadCart } from \"./helper/cartHelper\";\nimport { Link } from \"react-router-dom\";\nimport StripeCheckoutButton from \"react-stripe-checkout\";\nimport { API } from \"../backend\";\nimport { createOrder } from \"./helper/OrderHelper\";\n\nconst StripeCheckout = ({\n  products,\n  setReload = f => f,\n  reload = undefined\n}) => {\n  const [data, setData] = useState({\n    loading: false,\n    success: false,\n    error: \"\",\n    address: \"\"\n  });\n\n  const token = isAuthenticated() && isAuthenticated().token;\n  const userId = isAuthenticated() && isAuthenticated().user._id;\n\n  const getFinalAmount = () => {\n    let amount = 0;\n    products.map(p => {\n      amount = amount + p.price;\n    });\n    return amount;\n  };\n\n  const makePayment = token => {\n    const body = {\n      token,\n      products\n    };\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    return fetch(`${API}/stripepayment`, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(body)\n    })\n      .then(response => {\n        console.log(response);\n        //call further methods\n      })\n      .catch(error => console.log(error));\n  };\n\n  const showStripeButton = () => {\n    return isAutheticated() ? (\n      <StripeCheckoutButton\n        stripeKey=\"\"\n        token={makePayment}\n        amount={getFinalAmount() * 100}\n        name=\"Buy Tshirts\"\n      >\n        <button className=\"btn btn-success\">Pay with stripe</button>\n      </StripeCheckoutButton>\n    ) : (\n      <Link to=\"/signin\">\n        <button className=\"btn btn-warning\">Signin</button>\n      </Link>\n    );\n  };\n\n  return (\n    <div>\n      <h3 className=\"text-white\">Stripe Checkout {getFinalAmount()}</h3>\n      {showStripeButton()}\n    </div>\n  );\n};\n\nexport default StripeCheckout;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}